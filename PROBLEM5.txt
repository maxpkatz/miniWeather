# Use Nsight Systems to profile the code at the command line and
# determine the most expensive kernel.

nsys profile -f true --stats=true -o miniWeather5 ./miniWeather

# Use the Nsight Compute CLI to collect a profile of that kernel,
# and then analyze it in the Nsight Compute UI after scp'ing the
# generated file (miniWeather5.nsight-cuprof-report) to your local system.

nv-nsight-cu-cli -f -o miniWeather5 -k semi_discrete_step_189_gpu -c 1 -s 10 ./miniWeather

# Does Nsight Compute tell us that we are in good shape with
# this kernel? (What is it bound by)? If so, continue down the
# list of most expensive kernels until you find one that needs
# work according to the GPU Speed of Light section. Analyze that
# kernel in Nsight Compute? Is it latency-bound, or compute-bound
# and/or memory-bound? If it is latency-bound, use the bottleneck
# detection systems to obtain some information about what is the
# relevant limiter. Then use the "Source" page instead of the
# "Details" page to find where the cycles are being spent in this
# kernel. What simple change can we make to the most expensive
# line of code to improve the performance? Apply that change
# and see if the code gets faster. Also determine if we can
# make that change anywhere else, and if so then do it.

# If you're stuck, you can see the solution with

git apply SOLUTION5.patch
