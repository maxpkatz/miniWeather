# Use Nsight Systems to profile the code again.

nsys profile -f true --stats=true -o miniWeather3 ./miniWeather

# We see that initialization and memory allocation is now
# pretty expensive again in relative terms. We could just
# run longer again, but that's not the only knob we can tune
# here. The reason why we have this problem again is that the
# kernels are so fast that the GPU compute part of the problem
# is very small in relative terms. (Use Nsight Systems to determine
# how much time is spent in each portion, as well as the average
# wall time of an OpenACC loop). In particular, you may be able
# to spot in the UI that the time it takes to *launch* the work
# is comparable to the time it takes to *run* the work. This is
# a situation that is suboptimal on GPUs.

# TASK 3: Work that runs this quickly (only a few microseconds)
# often does not have enough parallelism to saturate the GPU's
# compute capacity. Find the nx_glob and ny_glob variables in
# the code and use them to increase the amount of work done on
# the GPU. (Hint: this should make the run take longer, so you
# will want to tune sim_time again to make the run complete in
# a reasonable amount of time.) Use Nsight Systems to verify
# that you've made them large enough that you spend most of
# your time in compute. If that is not the case, make the problem
# bigger and try again.

# If you're stuck, you can see the solution with

git apply SOLUTION3.patch
